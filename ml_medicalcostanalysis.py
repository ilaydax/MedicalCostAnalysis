# -*- coding: utf-8 -*-
"""ML_MedicalCostAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15wTjpW98L42p6Jy8cFG_RXpbaLv7JxRj

# **Importing Required Libraries**
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict, GridSearchCV
from sklearn.preprocessing import LabelEncoder, StandardScaler, OneHotEncoder
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.tree import DecisionTreeRegressor

"""# **Exploratory Data Analysis**"""

# Veri Setini İçe Aktarma
data = pd.read_csv("dataset path")

df = data.copy()
df.head()

# Veri hakkında temel istatistiksel bilgileri görüntüleme
df.describe()

# Vücut Kitle İndeksi (BMI) dağılımını inceleme
sns.histplot(data['bmi'], bins=20, kde=True)
plt.title('BMI Distribution')
plt.xlabel('BMI')
plt.ylabel('Frequency')
plt.show()

#"Sigara içen" ile "maliyet" arasındaki ilişkiyi inceleme
sns.scatterplot(x="smoker", y="charges", data=data)
plt.title('Charges by Smoking Status')
plt.xlabel('Smoker')
plt.ylabel('Charges')
plt.xticks(rotation=0)
plt.show()

# "Sigara içen" ile "bölge" arasındaki ilişkiyi inceleme
sns.countplot(x ='region', hue ='smoker', data = data)
plt.title('Smoker Count by Region')
plt.xlabel('Region')
plt.ylabel('Count')
plt.show()

# "BMI" ile "cinsiyet" arasındaki ilişkiyi inceleme
sns.boxplot(x='sex', y='bmi', data=data, palette='Set1')
plt.title('BMI by Gender')
plt.xlabel('Sex')
plt.ylabel('BMI')
plt.show()

# "Bölge"de en fazla "çocuk" sayısına sahip bölgeyi bulma
most_children_region = data.groupby('region')['children'].sum().idxmax()
print(f"Region with the most children: {most_children_region}")

# En fazla çocuğa sahip bölgenin çocuk sayısını hesaplama
most_children_count = data[data['region'] == most_children_region]['children'].sum()

# "Bölge"de en fazla çocuğa sahip bölgeyi görselleştirme
sns.barplot(x='region', y='children', data=data)
plt.title('Number of Children by Region')
plt.xlabel('Region')
plt.ylabel('Number of Children')
plt.show()

children_count = df.groupby("region")["children"].sum()
children_count.sort_values()

# "Yaş" ile "BMI" arasındaki ilişkiyi inceleme
sns.scatterplot(x='age', y='bmi', data=data)
plt.title('BMI by Age')
plt.xlabel('Age')
plt.ylabel('BMI')
plt.show()

# "BMI" ile "çocuk" arasındaki ilişkiyi inceleme

# Her bir cinsiyet için farklı renkler kullanıldı
sns.lineplot(x='children', y='bmi', data=data, hue='sex', style='sex', markers=True, markersize=10)

plt.title('BMI by Number of Children')
plt.xlabel('Number of Children')
plt.ylabel('BMI')
plt.xticks(data['children'].unique())
plt.legend(title='Sex', loc='upper right')
plt.grid(True)
plt.show()

# "BMI" de aykırı değer var mı?
sns.boxplot(data['bmi'])
plt.title('BMI Outliers')
plt.xlabel('BMI')
plt.show()

# Aykırı değerleri hesaplama
Q1 = data['bmi'].quantile(0.25)
Q3 = data['bmi'].quantile(0.75)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

outliers_lower = data[data['bmi'] < lower_bound]
outliers_upper = data[data['bmi'] > upper_bound]

print("Number of lower outliers:", len(outliers_lower))
print("Lower outliers:")
print(outliers_lower)

print("\nNumber of upper outliers:", len(outliers_upper))
print("Upper outliers:")
print(outliers_upper)

# "BMI" ile "maliyet" arasındaki ilişkiyi inceleme
sns.scatterplot(x='bmi', y='charges', data=data)
plt.title('Charges by BMI')
plt.xlabel('BMI')
plt.ylabel('Charges')
plt.show()

# "Bölge", "sigara içen" ve "BMI" arasındaki ilişkiyi çubuk grafik kullanarak inceleme
sns.barplot(x='region', y='bmi', hue='smoker', data=data)
plt.title('BMI by Region and Smoking Status')
plt.xlabel('Region')
plt.ylabel('BMI')
plt.show()

"""# **Data Preprocessing**"""

# Veri Ön İşleme

# Label Encoding
label_encoder = LabelEncoder()
data['sex'] = label_encoder.fit_transform(data['sex'])
data['smoker'] = label_encoder.fit_transform(data['smoker'])

# One-Hot Encoding
onehot_encoder = OneHotEncoder(drop='first', sparse=False)
encoded_region = onehot_encoder.fit_transform(data[['region']])
encoded_region_df = pd.DataFrame(encoded_region, columns=['region_1', 'region_2', 'region_3'])  # Yeni DataFrame
data_encoded = pd.concat([data.drop(['region'], axis=1), encoded_region_df], axis=1)  # Orijinal 'region' sütunu çıkarıldı

X = data_encoded.drop(['charges'], axis=1)
y = data_encoded['charges']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Histogramlar ile veri dağılımını görselleştirme
plt.figure(figsize=(12, 6))

# Ölçeklendirilmiş eğitim verisi
plt.subplot(1, 2, 1)
plt.hist(X_train_scaled, bins=20, edgecolor='black')
plt.title('Scaled Training Data Distribution')
plt.xlabel('Scaled Value')
plt.ylabel('Frequency')

# Ölçeklendirilmiş test verisi
plt.subplot(1, 2, 2)
plt.hist(X_test_scaled, bins=20, edgecolor='black')
plt.title('Scaled Test Data Distribution')
plt.xlabel('Scaled Valuer')
plt.ylabel('Frequency')

plt.tight_layout()
plt.show()

"""# **Model Selection**"""

# Modelleri oluşturma
models = [
    ('Linear Regression', LinearRegression()),
    ('Ridge Regression', Ridge()),
    ('Lasso Regression', Lasso()),
    ('Decision Tree', DecisionTreeRegressor()),
    ('Random Forest', RandomForestRegressor())
]

# Çapraz doğrulama sonuçlarını saklamak için bir sözlük
cv_rmse_scores = {}

# Modelleri çapraz doğrulama ile değerlendirme
for name, model in models:
    y_pred = cross_val_predict(model, X_train_scaled, y_train, cv=5)
    rmse = np.sqrt(mean_squared_error(y_train, y_pred))
    cv_rmse_scores[name] = rmse

# Performansı görselleştirme
plt.figure(figsize=(10, 6))
plt.bar(cv_rmse_scores.keys(), cv_rmse_scores.values())
plt.title('Model Performance Comparison')
plt.xlabel('Models')
plt.ylabel('Root Mean Square Error (RMSE)')
plt.xticks(rotation=45)
plt.show()

# Tüm modellerin RMSE skorlarını yazdırma
for name, rmse in cv_rmse_scores.items():
    print(f"{name}: RMSE = {rmse:.4f}")


# En iyi performans gösteren modeli seçme
best_model = min(cv_rmse_scores, key=cv_rmse_scores.get)
print("\nTop performing model:", best_model)
print("Best performance value (RMSE):", cv_rmse_scores[best_model])

"""# **Hyperparameter Optimization**"""

# Model: Random Forest Regressor
model = RandomForestRegressor()

# Parametrelerin olası değerleri
param_grid = {
    # Oluşturulacak ağaç sayısı
    'n_estimators': [100, 150, 200, 250, 300],

    # Her bir ağacın maksimum derinliği
    'max_depth': [None, 5, 10, 15, 20, 25, 30],

    # Bir düğümün ikiye bölünmesi için gereken minimum örnek sayısı
    'min_samples_split': [2, 3, 5, 7, 10],

    # Bir yaprak düğümünde gereken minimum örnek sayısı
    'min_samples_leaf': [1, 2, 3, 4, 5],

    # Bir düğümde göz önünde bulundurulacak maksimum özellik sayısı
    'max_features': ['auto', 'sqrt', 'log2']
}


# Izgara arama yapma
grid_search = GridSearchCV(model, param_grid, cv=5, scoring='neg_mean_squared_error')
grid_search.fit(X_train_scaled, y_train)

# En iyi parametreler ve en iyi skor
best_params = grid_search.best_params_
best_rmse = np.sqrt(-grid_search.best_score_)
print("En iyi parametreler:", best_params)
print("En iyi RMSE skoru:", best_rmse)

# Parametre kombinasyonları ve RMSE skorları
param_combinations = pd.DataFrame(grid_search.cv_results_['params'])
param_combinations['rmse'] = np.sqrt(-grid_search.cv_results_['mean_test_score'])

plt.figure(figsize=(12, 6))

# n_estimators için görselleştirme
plt.subplot(1, 2, 1)
heatmap_data_n_estimators = param_combinations.pivot_table(index='n_estimators', columns='max_depth', values='rmse')
sns.heatmap(heatmap_data_n_estimators, annot=True, cmap='coolwarm')
plt.title('RMSE Scores with n_estimators and max_depth')
plt.xlabel('max_depth')
plt.ylabel('n_estimators')

# max_depth için görselleştirme
plt.subplot(1, 2, 2)
heatmap_data_max_depth = param_combinations.pivot_table(index='max_depth', columns='n_estimators', values='rmse')
sns.heatmap(heatmap_data_max_depth, annot=True, cmap='coolwarm')
plt.title('RMSE Scores with max_depth and n_estimators')
plt.xlabel('n_estimators')
plt.ylabel('max_depth')

plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 6))

plt.figure(figsize=(8, 6))

# max_features için görselleştirme
heatmap_data_max_features = param_combinations.pivot_table(index='max_features', values='rmse')
ax = sns.barplot(x=heatmap_data_max_features.index, y=heatmap_data_max_features['rmse'], palette='coolwarm')
plt.title('RMSE Scores with max_features')
plt.xlabel('max_features')
plt.ylabel('RMSE')
plt.xticks(rotation=45)

# Değerleri grafiğe eklemek
for p in ax.patches:
    ax.annotate(f'{p.get_height():.4f}', (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='center', fontsize=10, color='black', xytext=(0, 10),
                textcoords='offset points')

plt.tight_layout()
plt.show()

"""# **Model Evaluation**"""

# Modelin tahminleri
y_pred_rf = grid_search.best_estimator_.predict(X_test_scaled)

# MSE hesaplama
mse_rf = mean_squared_error(y_test, y_pred_rf)
print("Mean Square Error for Random Forest (MSE):", mse_rf)

# MAE hesaplama
mae_rf = mean_absolute_error(y_test, y_pred_rf)
print("Average Absolute Error for Random Forest (MAE):", mae_rf)

# R-kare hesaplama
r2_rf = r2_score(y_test, y_pred_rf)
print("R-squared for Random Forest:", r2_rf)

